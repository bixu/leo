#!/usr/bin/env node
// -*- mode: javascript -*-

var async = require('async');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var minimist = require('minimist');

var argv = minimist(process.argv.slice(2), {
    alias: {
        "help": "h",
        "target": "t",
        "authtoken": ["k", "auth-token", "auth_token"],
        "brokerid": ["b", "broker-id", "broker_id"]
    }
});

if(argv.help) {
    help();
    process.exit(-1);
}

var configData = {};
var components = [];
var tasks = [];

var prompts = [
    { varname: "target", text: "Please enter a hostname or IP address that can be used by the Circonus broker to contact this host." },
    { varname: "authtoken", text: "Please enter your Circonus auth token." },
    { varname: "brokerid", text: "Please enter a broker ID to use." }
]

// Collect general system info from user
tasks.push(function(callback) {
    getSystemInfo(argv, prompts, callback);
});

// Load and initialize components
tasks.push(function(callback) {
    getAvailableComponents(argv, components, function(err) {
        if(err) {
            console.log("Error finding components: %s", err);
            process.exit(1);
        }
        else {
            callback();
        }
    });
});

async.parallel(tasks, function(err) {

});

/* ----- */

function help(err) {
    console.log("usage: %s [options]", process.argv[1]);
    console.log();
    console.log("optional arguments:");
    console.log("\t%s\t this help message", "-h, --help");
    console.log("\t%s\t an IP or hostname for this server accessible by the Circonus broker", "-t, --target");
    console.log("\t%s\t your Circonus auth token", "-k, --authtoken");
    console.log("\t%s\t broker ID to use", "-b, --brokerid");
    console.log();
}

function getSystemInfo(info, prompts, callback) {
    if(prompts.length > 0) {
        prompt = prompts.shift();

        if(info[prompt.varname]) {
            return getSystemInfo(info, prompts, callback);
        }

        console.log(prompt.text);

        var rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        var promptText = "> ";
        if(prompt.defaultValue) {
            promptText = util.format("[%s] > ", prompt.defaultValue);
        }

        rl.question(promptText, function(answer) {
            info[prompt.varname] = answer || prompt.defaultValue;
            rl.close();
            return getSystemInfo(info, prompts, callback);
        });
    }
    else {
        return callback(info);
    }
}

function getAvailableComponents(info, components, callback) {
    var componentsDir = path.resolve(__dirname, '..', 'components');

    fs.readdir(componentsDir, function(err, files) {
        if(err) {
            return callback(err);
        }

        files.forEach(function(filename) {
            fullPath = path.resolve(componentsDir, filename);

            if(path.extname(fullPath) == '.js') {
                component = {
                    name: path.basename(fullPath).replace('.js', ''),
                    module: require(fullPath)
                };

                components.push(component);
            }
        });

        return initializeComponents(info, components, callback);
    });
}

function initializeComponents(info, components, callback) {
    tasks = []

    components.forEach(function(component) {
        if(component.module.initialize) {
            tasks.push(function(callback) {
                component.module.initialize(info, function(err) {
                    if(err) {
                        console.log("Error initializing component <%s>: %s", component.name, err);
                        process.exit(1);
                    }
                    else {
                        callback();
                    }
                });
            });
        }
    });

    async.parallel(tasks, function(err) {
        return err;
    });
}